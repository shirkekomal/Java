class Employee 
{
	String name;
	int age;
	int id;
}

class Student
{
	String name;
	int age;
	int id;

	@Override
		public String toString()	//To return object;
			{
			return this.name+"-->>"+this.id+"-->>"+this.age; //To return current invoking object;
			}
 
 
 
	public boolean equals(Object o)		//o is the object class which we called from main;
		{	
										
			if(!(o instanceof Student))    //for checking if whether outside class's object is there;
				{
					System.out.println("False Because of Outside class(Instanace) ");
					return false;
				}
	
	 
			Student temp=(Student)o;	//to store data in any variable for comparing;
	
	 
			if(this.age==temp.age && this.id==temp.id && this.name.equals(temp.name))
				{
					System.out.println("true both are same");
					return true;
				}
			else
				{
					System.out.println("False inner(both are not same)");
				return false;
				}
		}
 public static void main(String [] arg)
 {
	 Student s=new Student();
	 s.name="varsha";
	 s.age=23;
	 s.id=122;
	 
	 //System.out.println(s); //just for printing object i.e s.name id & age;
	 
	/* Student s1=s;
	System.out.println(s);
	System.out.println(s1);
	
	if(s1==s)						//this will only applicable if both are pointing to same object like (Student s1=s);
	{
		System.out.println("s1 and s are equal");
	}*/
	
		
	/* Student s1=new Student();
	 s1.name="varsha";
	 s1.age=23;
	 s1.id=122;		//if both s1 and s same then true and if not equal in any one parameter then it will display false;
	 
	s.equals(s1);				//to compare the contents of both s and s1 we've to use equals;
	*/
	
	Employee e=new Employee();
	 e.name="varsha";
	 e.age=23;
	 e.id=122;
	
	s.equals(e); //We can't not access Employee because of outer class(Employee);
	//reference of s and object of Employee not possible;
	
 }
}